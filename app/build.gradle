/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'application'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
    id 'org.asciidoctor.jvm.pdf' version '4.0.2'
}

asciidoctor {
    sourceDir = file('src/docs')
    outputDir = file("${buildDir}/docs/asciidoctor")
}

asciidoctorPdf {
    sourceDir = file('src/docs')
    outputDir = file("${buildDir}/docs/asciidoctorPdf")
}

asciidoctorj {
    requires 'rouge'
    modules {
        diagram.use()
        diagram.version '1.5.16'
    }
    attributes 'build-gradle': file('build.gradle'),
            'sourcedir': project.sourceSets.main.java.srcDirs[0],
            'source-highlighter': 'rouge',
            'rouge-style': 'github',
            'rouge-theme': 'github'
}

jacoco {
    toolVersion = "0.8.12"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

sonar {
    properties {
        property "sonar.projectKey", "IQPlay_backend"
        property "sonar.organization", "iqplay"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/IQPlay/library")
        credentials {
            username = System.getenv("GITHUB_ACTOR") ?: project.findProperty("gpr.user")
            password = System.getenv("GH_PACKAGES_TOKEN") ?: project.findProperty("gpr.key")
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security:3.4.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.4.0'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.4.0'
    implementation 'org.springframework.boot:spring-boot-starter:3.4.0'
    implementation 'com.mysql:mysql-connector-j:9.1.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    implementation 'fr.parisnanterre:iqplaylib:1.2.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.apache.commons:commons-jexl3:3.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.4.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation("info.bliki.wiki:bliki-core:3.1.0")
    implementation("org.jsoup:jsoup:1.19.1")
    implementation 'com.azure:azure-ai-textanalytics:5.5.6'
    implementation("com.squareup.okhttp3:okhttp:4.12.0")
    implementation("org.json:json:20250107")
    implementation("jakarta.validation:jakarta.validation-api:3.1.1")
    implementation("com.google.code.gson:gson:2.12.1")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

group = "fr.parisnanterre"
version = "1.1.0"

application {
    mainClass = 'fr.parisnanterre.iqplay.App'
}

tasks.named('asciidoctor').configure {
    dependsOn tasks.named('asciidoctorPdf')
}
tasks.named('build').configure {
    dependsOn tasks.named('asciidoctor')
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}
