/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco' //pour les tests coverage
    id "org.sonarqube" version "5.1.0.4882"
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
    id 'org.asciidoctor.jvm.pdf' version '4.0.2'
}
asciidoctor {
    sourceDir = file('src/docs')
    outputDir = file("${buildDir}/docs")
}

asciidoctorj {
    requires 'rouge'
    modules {
        diagram.use()
        diagram.version '1.5.16'
    }
    attributes 'build-gradle': file('build.gradle'),
        'sourcedir': project.sourceSets.main.java.srcDirs[0],
        'source-highlighter': 'rouge',
        'rouge-style': 'github',
        'rouge-theme': 'github'
        
}

asciidoctorPdf {
    sourceDir = file('src/docs')
    outputDir = file("${buildDir}/docs")
}


jacoco{
    toolVersion = "0.8.12" // jacoco version, denpendance de compilation
}
test{
    useJUnitPlatform() //pour les tests
    finalizedBy jacocoTestReport //pour les tests coverage
}
jacocoTestReport{
    reports{
        xml.required.set(true) //pour les tests coverage
        html.required.set(true) //pour les tests coverage
    }
}

sonar {
  properties {
    property "sonar.projectKey", "IQPlay_backend"
    property "sonar.organization", "iqplay"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/IQPlay/library/")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
    }
}

dependencies {
    // Use JUnit test framework.
    testImplementation libs.junit
//    implementation 'org.springframework.cloud:spring-cloud-starter-gateway:4.2.0'
//    implementation 'org.springframework.boot:spring-boot-starter-security:3.4.0'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:3.4.0'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.4.0'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc:3.4.0'

    implementation 'fr.parisnanterre:iqplaylib:0.2-SNAPSHOT'

    implementation 'org.springframework.boot:spring-boot-starter-web:3.3.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.3'
    implementation 'org.apache.commons:commons-jexl3:3.2'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

group = "fr.parisNanterre"
version = "0.2"

application {
    mainClass = 'fr.parisNanterre.iqPlay.App'
}

// edit the build task to generate the asciidoc pdf too
tasks.named('asciidoctor').configure {
    dependsOn tasks.named('asciidoctorPdf')
}
tasks.named('build').configure {
    dependsOn tasks.named('asciidoctor')
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}
